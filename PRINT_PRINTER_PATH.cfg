[gcode_macro PRINT_PRINTER_PATH]
description: "prints the contents of printer.$PATH$, use FORCE=1 to print longer messages"
variable_cutoff: 80
variable_key_cutoff: 50

# Color scheme variables
variable_color_key: "primary--text text--lighten-5"
variable_color_value: "white"
variable_color_container: "warning--text text--darken-1"
variable_color_special: "success--text text--darken-1"
variable_color_text: "primary--text text--lighten-4"
variable_color_error: "error--text text--darken-1"
variable_color_hint: "secondary--text text--lighten-1"
variable_color_type: "accent--text text--lighten-4"
variable_color_index: "info--text text--lighten-3"
variable_color_bool: "success--text text--darken-2"
variable_color_bool_false: "error--text text--darken-2"
variable_color_none: "secondary--text text--darken-4"
variable_color_number: "info--text text--lighten-1"
variable_color_string: "primary--text text--lighten-1"
variable_color_object: "accent--text text--darken-4"
gcode:
    {% set force_print = params.FORCE|default(0)|int %}
    {% set path_str = params.PATH|default("") %}
    {% if path_str.startswith("printer.") %}
        {% set path_str = path_str[8:] %}
    {% endif %}
    {% set parts = path_str.split('.') %}
    {% set ns = namespace(current=printer, invalid=False) %}

    {% for part in parts %}
        {% if not ns.invalid %}
            {% set keys = ns.current|list %}
            {% if part in keys %}
                {% set ns.current = ns.current[part] %}
            {% else %}
                RESPOND MSG="<span class='{color_error}'>Invalid part '{part}' in path 'printer.{params.PATH}'</span>"
                {% set ns.invalid = True %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if not ns.invalid %}
        {% set type_str = ns.current.__class__.__name__ %}
        {% set val_str = ns.current|string %}

        {% if type_str not in ('dict', 'list', 'tuple', 'set') %}
            {% set value_color = color_value %}
            {% if type_str == 'Coord' %}
                {% set value_color = color_special %}
            {% elif type_str == 'bool' %}
                {% if val_str == "True" %}
                    {% set value_color = color_bool %}
                {% else %}
                    {% set value_color = color_bool_false %}
                {% endif %}
            {% elif type_str in ['float', 'int'] %}
                {% set value_color = color_number %}
            {% elif type_str == 'str' %}
                {% set value_color = color_string %}
            {% elif type_str == 'NoneType' %}
                {% set value_color = color_none %}
            {% else %}
                {% set value_color = color_object %}
            {% endif %}
            RESPOND MSG="<span class='{color_text}'>Value at printer.{path_str}:</span> <span class='{value_color}'>'{val_str}'</span> <span class='{color_type}'>({type_str})</span>"
        {% endif %}

        {% if type_str in ('dict', 'list', 'tuple', 'set') %}
            {% set all_keys = ns.current|list %}
            {% if all_keys|length > 0 %}
                RESPOND MSG="<span class='{color_text}'>Contents of:</span> <span class='{color_key}'>printer.{path_str}</span>"
                {% if force_print %}
                    {% set limited_keys = all_keys %}
                {% else %}
                    {% set limited_keys = all_keys[:key_cutoff] %}
                {% endif %}
                {% for k in limited_keys %}
                    {% set raw_val = ns.current[k] %}
                    {% set val_type = raw_val.__class__.__name__ %}
                    {% set val_str = raw_val|string %}

                    {% set val_ns = namespace(trimmed=val_str, truncated_chars=0) %}
                    {% if val_str|length > cutoff and not force_print %}
                        {% set val_ns.trimmed = val_str[:cutoff - 3] + "..." %}
                        {% set val_ns.truncated_chars = val_str|length - cutoff + 3 %}
                    {% endif %}

                    {% set prefix_color = color_key %}
                    {% set value_color = color_value %}
                    {% set type_color = color_type %}
                    {% set hint_color = color_hint %}

                    {% if val_type in ('dict', 'list', 'tuple', 'set') %}
                        {% set value_color = color_container %}
                    {% elif val_type == 'Coord' %}
                        {% set value_color = color_special %}
                    {% elif val_type == 'bool' %}
                        {% if val_str == "True" %}
                            {% set value_color = color_bool %}
                        {% else %}
                            {% set value_color = color_bool_false %}
                        {% endif %}
                    {% elif val_type in ['float', 'int'] %}
                        {% set value_color = color_number %}
                    {% elif val_type == 'str' %}
                        {% set value_color = color_string %}
                    {% elif val_type == 'NoneType' %}
                        {% set value_color = color_none %}
                    {% else %}
                        {% set value_color = color_object %}
                    {% endif %}

                    {% if val_ns.trimmed != val_str %}
                        RESPOND MSG="<span class='{prefix_color}'>{k}:</span> <span class='{value_color}'>'{val_ns.trimmed}'</span> <span class='{type_color}'>({val_type})</span> <span class='{hint_color}'>(cut {val_ns.truncated_chars} chars)</span>"
                    {% else %}
                        RESPOND MSG="<span class='{prefix_color}'>{k}:</span> <span class='{value_color}'>'{val_ns.trimmed}'</span> <span class='{type_color}'>({val_type})</span>"
                    {% endif %}

                    {% if val_type == 'Coord' and raw_val is defined %}
                        {% for axis in ['x','y','z','e'] %}
                            {% set val = raw_val[axis]|default("n/a") %}
                            {% set val_axis_type = val.__class__.__name__ %}
                            {% set val_color = color_value %}
                            {% if val_axis_type == 'bool' %}
                                {% if val|string == "True" %}
                                    {% set val_color = color_bool %}
                                {% else %}
                                    {% set val_color = color_bool_false %}
                                {% endif %}
                            {% elif val_axis_type in ['float', 'int'] %}
                                {% set val_color = color_number %}
                            {% elif val_axis_type == 'str' %}
                                {% set val_color = color_string %}
                            {% elif val_axis_type == 'NoneType' %}
                                {% set val_color = color_none %}
                            {% else %}
                                {% set val_color = color_object %}
                            {% endif %}
                            RESPOND MSG="<span class='{color_index}'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{k}.{axis}:</span> <span class='{val_color}'>{val}</span> <span class='{color_type}'>({val_axis_type})</span>"
                        {% endfor %}
                    {% endif %}
                {% endfor %}
                {% if not force_print and all_keys|length > key_cutoff %}
                    {% set remaining = all_keys|length - key_cutoff %}
                    RESPOND MSG="<span class='{color_text}'>... {remaining} keys. (Use FORCE=1 to print all.)</span>"
                {% endif %}
            {% else %}
                RESPOND MSG="<span class='{color_text}'>printer.{path_str} has no keys or contents.</span>"
            {% endif %}
        {% endif %}
    {% endif %}
