[gcode_macro PRINT_PRINTER_PATH]
description: "prints the contents of printer.$PATH$, use FORCE=1 to print longer messages"
variable_cutoff: 80
variable_key_cutoff: 50
#valid colors are 'primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning'
variable_color_parmesan_key: "success"    # Color for keys starting with 'params_'
variable_color_key: "accent"             # Color for all other keys
variable_color_value: "accent"            # Color for values (strings, numbers, booleans)
variable_color_container: "info"          # Color for lists, dicts, list of dicts
variable_color_text: "primary"          # Color for text like 'Contents of'
variable_color_error: "error"             # Color for paths and errors
gcode:
    {% set force_print = params.FORCE|default(0)|int %}
    {% set path_str = params.PATH|default("") %}
    {% set parts = path_str.split('.') %}
    {% set cutoff = cutoff|int %}
    {% set key_cutoff = key_cutoff|int %}

    {% set color_key_param = color_parmesan_key %}
    {% set color_key = color_key %}
    {% set color_value = color_value %}
    {% set color_container = color_container %}
    {% set color_text = color_text %}
    {% set color_error = color_error %}

    {% set ns = namespace(invalid=False, current=printer) %}

    ; Path Traversal
    {% for part in parts %}
        {% if not ns.invalid %}
            {% set keys = ns.current|list %}
            {% if part in keys %}
                {% set ns.current = ns.current[part] %}
            {% else %}
                {% if path_str != "" %}
                    EXTENDED_RESPOND MSG="Invalid part '{part}' in path 'printer.{path_str}'" COLOR={color_error}
                {% endif %}
                {% if keys|length > 0 %}
                    {% set keys_ns = namespace(keys_str="", stop=False, truncated=False) %}
                    {% for k in keys %}
                        {% if not keys_ns.stop %}
                            {% set tentative = keys_ns.keys_str + k + ", " %}
                            {% if force_print or tentative|length <= cutoff %}
                                {% set keys_ns.keys_str = tentative %}
                            {% else %}
                                {% set remaining = keys|length - loop.index0 %}
                                EXTENDED_RESPOND PREFIX="Available keys here:" PREFIX_COLOR={color_text} MSG="{keys_ns.keys_str}...truncated {remaining} keys. (Use FORCE=1 to print all.)" COLOR={color_key}
                                {% set keys_ns.stop = True %}
                                {% set keys_ns.truncated = True %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if not keys_ns.truncated %}
                        EXTENDED_RESPOND PREFIX="Available keys here:" PREFIX_COLOR={color_text} MSG="{keys_ns.keys_str}" COLOR={color_key}
                    {% endif %}
                {% else %}
                    EXTENDED_RESPOND MSG="No keys available at this level." COLOR={color_text}
                {% endif %}
                {% set ns.invalid = True %}
            {% endif %}
        {% endif %}
    {% endfor %}

    ; Final Output
    {% if not ns.invalid %}
        {% if ns.current is string or ns.current is number or ns.current is boolean or ns.current is none %}
            {% set val_str = ns.current|string %}
            {% if ns.current is string %}
                {% set type_str = "string" %}
            {% elif ns.current is number %}
                {% set type_str = "number" %}
            {% elif ns.current is boolean %}
                {% set type_str = "boolean" %}
            {% elif ns.current is none %}
                {% set type_str = "none" %}
            {% else %}
                {% set type_str = "unknown" %}
            {% endif %}
            EXTENDED_RESPOND PREFIX="Value at printer.{path_str}:" PREFIX_COLOR={color_text} MSG="'{val_str}'  ({type_str})" #COLOR={color_value}
        {% else %}
            {% set current_str = ns.current|string %}
            {% if current_str[0] == "[" and current_str[-1] == "]" %}
                EXTENDED_RESPOND PREFIX="Value at printer.{path_str}:" PREFIX_COLOR={color_text} MSG="{current_str}" COLOR={color_container}
            {% else %}
                {% set all_keys = ns.current|list %}
                {% if all_keys|length > 0 %}
                    EXTENDED_RESPOND PREFIX="Contents of:" PREFIX_COLOR={color_text} MSG="'printer.{path_str}'" COLOR={color_key}
                    {% if force_print %}
                        {% set limited_keys = all_keys %}
                    {% else %}
                        {% set limited_keys = all_keys[:key_cutoff] %}
                    {% endif %}
                    {% for k in limited_keys %}
                        {% set key_color = color_key %}
                        {% if k.startswith("params_") %}
                            {% set key_color = color_key_param %}
                        {% elif k in ("name", "status") %}
                            {% set key_color = color_key %}
                        {% endif %}

                        {% set v_raw = ns.current[k]|string %}
                        {% set val_ns = namespace(trimmed=v_raw, truncated_chars=0) %}
                        {% if v_raw|length > cutoff and not force_print %}
                            {% set val_ns.trimmed = v_raw[:cutoff - 3] + "..." %}
                            {% set val_ns.truncated_chars = v_raw|length - cutoff + 3 %}
                        {% endif %}

                        {% set v_lower = v_raw|lower %}
                        {% set val_type = none %}
                        {% if v_lower == "true" or v_lower == "false" %}
                            {% set val_type = "bool" %}
                        {% elif v_raw[0] == "[" and v_raw[-1] == "]" and v_raw[1] == "{" and v_raw[-2] == "}" %}
                            {% set val_type = "list of dicts" %}
                        {% elif v_raw[0] == "[" and v_raw[-1] == "]" %}
                            {% set val_type = "list" %}
                        {% elif v_raw[0] == "{" and v_raw[-1] == "}" %}
                            {% set val_type = "dict" %}
                        {% endif %}

                        {% set value_color = color_value %}
                        {% if val_type in ("list", "dict", "list of dicts") %}
                            {% set value_color = color_container %}
                        {% endif %}

                        {% if val_type == "list of dicts" %}
                            {% set count_ns = namespace(count=0) %}
                            {% for c in v_raw %}
                                {% if c == "}" %}
                                    {% set count_ns.count = count_ns.count + 1 %}
                                {% endif %}
                            {% endfor %}
                            EXTENDED_RESPOND PREFIX="{k}:" PREFIX_COLOR={key_color} MSG="(list with {count_ns.count} dicts)" #COLOR={value_color}
                        {% elif val_type %}
                            {% if val_ns.trimmed != v_raw %}
                                EXTENDED_RESPOND PREFIX="{k}:" PREFIX_COLOR={key_color} MSG="'{val_ns.trimmed}'  ('{val_type}', cut {val_ns.truncated_chars} chars)" #COLOR={value_color}
                            {% else %}
                                EXTENDED_RESPOND PREFIX="{k}:" PREFIX_COLOR={key_color} MSG="'{val_ns.trimmed}'  ('{val_type}')" #COLOR={value_color}
                            {% endif %}
                        {% else %}
                            {% if val_ns.trimmed != v_raw %}
                                EXTENDED_RESPOND PREFIX="{k}:" PREFIX_COLOR={key_color} MSG="'{val_ns.trimmed}'  (cut {val_ns.truncated_chars} chars)" #COLOR={value_color}
                            {% else %}
                                EXTENDED_RESPOND PREFIX="{k}:" PREFIX_COLOR={key_color} MSG="'{val_ns.trimmed}'" #COLOR={value_color}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    {% if not force_print and all_keys|length > key_cutoff %}
                        {% set remaining = all_keys|length - key_cutoff %}
                        EXTENDED_RESPOND MSG="... {remaining} keys. (Use FORCE=1 to print all.)" COLOR={color_text}
                    {% endif %}
                {% else %}
                    EXTENDED_RESPOND MSG="'{path_str}' has no keys or contents." COLOR={color_text}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}

[gcode_macro EXTENDED_RESPOND]
gcode:
  {% set colors = ('primary', 'secondary', 'accent', 'info', 'success', 'error', 'warning') %}

  {% if params.TYPE is defined and params.MSG is defined %} # if TYPE and MSG are defined, just use the default RESPOND
      {% if params.TYPE in ('echo', 'echo_no_space', 'command', 'error') and params.TYPE != '' %}
          {% set type = 'TYPE=' + params.TYPE|string %}
      {% else %}
          RESPOND TYPE=error MSG="RESPOND TYPE '{params.TYPE}' is invalid. Must be one of 'echo', 'echo_no_space', 'command' or 'error'"
      {% endif %}
  {% endif %}

  {% set color = "DEFAULT" %} # default garbage value
  
  {% if params.MSG is defined and params.COLOR is defined %}
  
      {% set color = params.COLOR|lower %}

      {% if color in colors %} # valid color supplied
          {% set msg = 'MSG="<span class=' + color + '--text>' + params.MSG + '</span>"'|string %} # apply color to main message body
      {% else %}
          RESPOND TYPE=error MSG="RESPOND COLOR '{color}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}

  {% elif params.MSG is defined %} # no color, but yes message
      {% set msg = 'MSG="'+ params.MSG + '"'|string %}
  {% endif %}

  {% if params.PREFIX is defined and params.PREFIX_COLOR is defined %} # check if a separate color was supplied for the prefix - otherwise, fall back on the default one
  
      {% set prefixColor = params.PREFIX_COLOR | default("DEFAULT") | lower %}
  
      {% if prefixColor in colors %} # valid prefix color supplied
          {% set prefix = 'PREFIX="<span class=' + prefixColor + '--text>' + params.PREFIX + '</span>"'|string %}
      {% elif color in color %} # prefix color is invalid - fall back on overall value if possible
          {% set prefix = 'PREFIX="<span class=' + color + '--text>' + params.PREFIX + '</span>"'|string %}
      {% else %}
          RESPOND TYPE=error MSG="RESPOND PREFIX_COLOR '{prefixColor}' is invalid. Must be one of 'primary', 'secondary', 'accent', 'info', 'success', 'warning' or 'error'"
      {% endif %}
      
  {% elif params.PREFIX is defined and color in colors %} # no provided prefix color - use the same color for the prefix as is used for the main message body if possible
      {% set prefix = 'PREFIX="<span class=' + color + '--text>' + params.PREFIX + '</span>"'|string %}
  {% elif params.PREFIX is defined %} # no valid colors provided either for the prefix or overall but we DO have a prefix- leave it default
      {% set prefix = 'PREFIX="' + params.PREFIX + '"'|string %}
  {% else %} # no prefix provided - don't use one!
      {% set prefix = "" | string %}
  {% endif %}
  
  RESPOND {type} {prefix} {msg}
