# CONTENTS:
# - DOC_DUMP -> SEARCH DOCS FOR .FUNCTION() 
# - MEGA_DUMP -> N LEVEL BRUTE FORCE SEARCH (PRINTER OBJECT)
# - PRINT_PRINTER_PATH -> PRINTS PRINTER.FOO.BAR (CONTENTS)
# - NINJAGO -> evaluates jinja shit for testing

[gcode_macro DOC_DUMP]
# Do take note that these are only '.somethings()' and not '|somethings()'! those arent exposed :(
#
# valid filters (|somethings) are:
#   default, int, float, round, lower, upper, replace, join, length, count, list, last, map, select, reject
#   rejectattr, sort, dictsort, items, abs, max, min, sum, format, safe, e, escape, string, title, capitalize, trim
#   truncate, indent, batch, center, slice, unique, reverse, random, pprint, filesizeformat, wordcount, wordwrap, urlencode, urlize, xmlattr, d
#
#############################
variable_splitter_key: '§'
#############################
description: "Usage: DOC_DUMP S=foo§bar   (§ = AND, case-insensitive)"
variable_color_obj:   "rgb(0,150,255)" 
variable_color_meth:  "rgb(255,200,50)" 
variable_color_doc:   "rgb(180,180,180)" # fiddle if you want idc
variable_color_match: "rgb(255,0,100)"
gcode:
    {% set query   = params.S|default("")|string %}
    {% set terms   = query.lower().split(splitter_key) %}
    {% set include__ = params.DUNDER|default(False) %} # dunder = from down under = autstrialian (double under -> __ :P)

    {% set types = [
        ["string",   ""], ["list",  []],  ["dictionary",  {}], # actual objects. cant think of more 
        ["tuple", ()],    ["int", 0|int], ["float", 0.0] # (casting 0 to |int cause im paranoid)
    ] %}

    # ──────────────────────────────────────────────────────────────
    # Highlight helper – returns the (possibly) highlighted string
    {% macro highlight(text, term) %}
        {% set L = term|length %}
        {% set idx = text.lower().find(term) %}
        {% set return = text[:idx] ~ "<span style='color:" ~ color_match ~ "'>" ~ text[idx:idx+L] ~ "</span>" ~ text[idx+L:] if idx != -1 else text %}
        {return}
    {%- endmacro %}
    # ──────────────────────────────────────────────────────────────
    # similar but cursed cause docs use weird formatting i dunno
    {% macro format_doc(text) %}
        {% set parts = text.split('\n\n') %}
        {% set paragraphs = [] %}
        {% for p in parts %}
            {% set _ = paragraphs.append(p|replace('\n', ' ')|trim) %}
        {% endfor %}
        {paragraphs|join('<br>')}
    {%- endmacro %}

    # fill buckets[typename] -> list of HTML rows
    {% set buckets = namespace(total=0, data={}) %}
    {% for typ, obj in types %}{% set _ = buckets.data.update({typ: []}) %}{% endfor %}

    {% for typ, obj in types %}
        {% for meth in obj.__dir__() %} # meth
            {% if not (meth.startswith("__") and meth.endswith("__")) or include__ %}
                {% set fn = obj|attr(meth) %}
                {% if fn and fn.__doc__ %}
                    {% set search_docs = fn.__doc__ %}
                    {% set keep = namespace(ok=true) %} # the more namespaces the better because you never loose track, right?
                    {% for t in terms %}{% set keep.ok=false if t and t not in (typ ~ " " ~ meth ~ " " ~ search_docs).lower() else keep.ok %}{% endfor %}

                    {% if keep.ok %}
                        {% set buckets.total = buckets.total + 1 %}
                        # escape
                        {% set mask = namespace(meth_html = meth, doc_html = format_doc(search_docs|e)) %}
                        {% for t in terms %}
                            {% set mask.meth_html = highlight(mask.meth_html, t) %}
                            {% set mask.doc_html  = highlight(mask.doc_html,  t) %}
                        {% endfor %}
                        {% set row = "<div style='margin-left:1em'><span style='color:" ~ color_obj  ~ "'>" ~ typ
                                ~ "</span>.<span style='color:" ~ color_meth ~ "'>"  ~ mask.meth_html ~ "<br>"
                                ~ "<span style='color:" ~ color_doc  ~ "; white-space:pre-wrap; font-size:small;'>" ~ mask.doc_html
                                ~ "</span></div>" %}
                        {% set _ = buckets.data[typ].append(row) %}
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    {% if buckets.total == 0 %}
        RESPOND MSG="No doc matches found for '{query}'"
    {% else %}
        {% set sections = [] %}
        {% for pair in types %}
            {% set typ = pair[0] %}
            {% if buckets.data[typ] %}
                {% set block = "<details><summary>" ~ typ ~ " (" ~ buckets.data[typ]|length|string ~ ")</summary>" ~ buckets.data[typ]|join('') ~ "</details>" %}
                {% set _ = sections.append(block) %}
            {% endif %}
        {% endfor %}
        {% set msg = "Found " ~ buckets.total|string ~ " matches for '" ~ query ~ "':" ~ sections|join('')|replace('\n', '') %}
        RESPOND MSG="{msg}"
    {% endif %}



[gcode_macro MEGA_DUMP]
description: Up to N-level BFS. If container path matches, show (dict) and skip inside. [S=foo°bar°stack] will return results containing foo, and bar, and stack.
variable_color_path:    "rgb(128,128,128)"  # light gary
variable_color_key:     "rgb(0,150,255)"    # blue
variable_color_val:     "rgb(255,200,50)"   # yellow
variable_color_typ:     "rgb(180,180,180)"  # whiteish
variable_color_match:   "rgb(255,0,100)"    # magenta
variable_long_limit:    "120"                 # characters before cutoff
variable_max_depth:     "5"                   # 5 levels (3-4 should work too)
gcode:
    {% set raw_s = params.S|default("")|string %}
    {% set search_lc = raw_s|lower %}
    {% set terms = search_lc.split("°") %}

    #{% set nl = '\u0026\u0023\u0031\u0030\u003b' %}
    {% set nl = '<br>' %}

    {% set ns = namespace(lines=[], total=0, stack=[], done=False, doneAtLine="None", val="") %}

    {% for top_key in printer %}
        {% set item = [top_key|string, printer[top_key], 1] %}
        {% set ns.stack = ns.stack + [ item ] %}
    {% endfor %}

    {% for i in range(99999) %}
        {% if ns.stack|length == 0 %}
            {% set ns.done = 1 %}
        {% else %}
            {% set popped = ns.stack[ ns.stack|length -1 ] %}
            {% set ns.stack = ns.stack[:ns.stack|length -1] %}
            {% set cur_path = popped[0] %}
            {% set cur_obj  = popped[1] %}
            {% set depth    = popped[2] %}
            {% set typ_str  = cur_obj.__class__.__name__|string %}

            {% set val_str = "" %}
            {% if typ_str not in ["dict", "list", "tuple", "set"] %}
                {% set val_str = cur_obj|string %}
            {% endif %}

            {% set combined = cur_path|lower %}
            {% if val_str %}
                {% set combined = combined ~ " " ~ val_str|lower ~ typ_str|lower %}
            {% endif %}

            {% set match_ns = namespace(keep=true) %}
            {% for t in terms %}
                {% if t|length > 0 and not (t in combined) %}
                    {% set match_ns.keep = false %}
                {% endif %}
            {% endfor %}
            
            {% if 'configfile.config' in cur_path|lower %}
                {% set match_ns.keep = false %}
            {% endif %}

            {% if match_ns.keep %}
                {% set ns.total = ns.total + 1 %}
                {% set ns.final_path = cur_path %}
                {% set ns.final_val  = val_str|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") %}
                {% set ns.final_typ  = "(" ~ typ_str ~ ")" %}
                {% set segments = cur_path.split(".") %}
                {% set ns.final_key = segments[segments|length -1] %}

                # |replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;")

                {% set hover_path = cur_path|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") %}
                {% set hover = "printer." ~ hover_path %}

                # ------------------------------------------------------------------ #
                #  Two-pass highlighter: avoids tuching characters that already
                #  live inside earlier span tags.
                #  - terms  - list split from the S=… parameter
                #  - color_match  – your highlight RGB variale
                #  - ns.final_path / key / val / typ  – the strings we want to color
                # ------------------------------------------------------------------ #

                {% set mask = namespace(path = ns.final_path, key  = ns.final_key, val  = ns.final_val, typ  = ns.final_typ) %}

                {% for t in terms %}
                    {% if t|length > 0 %}
                        {% set term = t|lower %}
             
                        {% set lower_path = mask.path|lower %}
                        {% set lower_key  = mask.key|lower %}
                        {% set lower_val  = mask.val|lower %}
                        {% set lower_typ  = mask.typ|lower %}

                        # ---- path ----
                        {% set idx = lower_path.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.path[idx:idx + term|length] %}
                            {% set mask.path = mask.path[:idx] ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>" ~ mask.path[idx + term|length:] %}
                        {% endif %}
                        # ---- key ----
                        {% set idx = lower_key.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.key[idx:idx + term|length] %}
                            {% set mask.key = mask.key[:idx] ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>" ~ mask.key[idx + term|length:] %}
                        {% endif %}
                        # ---- val ----
                        {% set idx = lower_val.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.val[idx:idx + term|length] %}
                            {% set mask.val = mask.val[:idx]  ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>"  ~ mask.val[idx + term|length:] %}
                        {% endif %}
                        # ---- typ ----
                        {% set idx = lower_typ.find(term) %}
                        {% if idx != -1 %}
                            {% set orig = mask.typ[idx:idx + term|length] %}
                            {% set mask.typ = mask.typ[:idx]  ~ "<span style='color:" ~ color_match ~ "'>" ~ orig ~ "</span>"  ~ mask.typ[idx + term|length:] %}
                        {% endif %}
                    {% endif %}
                {% endfor %}

                {% set ns.final_path = mask.path %}
                {% set ns.final_key  = mask.key  %}
                {% set ns.final_val  = mask.val  %}
                {% set ns.final_typ  = mask.typ  %}

                {% if typ_str in ["dict", "list", "tuple", "set"] and cur_obj|length > 0 %}
                    {% set summary = "<summary><span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~ "</span> {<span style='color:" ~ color_val ~ "'>(" ~ typ_str ~ ")</span>}</summary>" %}
                    {% set children = [] %}
                    {% set show_keys = cur_obj.keys()|list if typ_str == "dict" else range(cur_obj|length) %}
                    {% for k in show_keys[:10] %}
                        {% set val_type = cur_obj[k].__class__.__name__ %}
                        #{% if val_type not in ["dict", "list", "tuple", "set"] %}
                            {% set val_str = cur_obj[k]|string %}
                            {% if val_str|length > 50 %}
                                {% set val_str = val_str[:47] ~ "..." %}
                            {% endif %}
                            {% set child_line = "<div style='margin-left:1em'><span style='color:" ~ color_key ~ "'>" ~ k|string ~ ":</span> <span style='color:" ~ color_val ~ "'>" ~ val_str|replace('"', '&quot;')|replace("'", '&apos;')|replace("<", "&lt;")|replace(">", "&gt;") ~ "</span> <span style='color:" ~ color_typ ~ "'>(" ~ val_type ~ ")</span></div>" %}
                            {% set _ = children.append(child_line) %}
                        #{% endif %}
                    {% endfor %}
                    {% set html = "<span style='display:inline-block'><details title='" ~ hover ~ "'>" ~ summary ~ children|join() ~ "</details></span>" %} # children|join(nl)
                    {% set ns.lines = ns.lines + [html] %}
                {% else %}
                    # -------------------------------------------------------------------- #
                    #  BUILD PRETTY INDENT
                    #  – ident at if else for starts
                    #  – reduce indent at ending tags
                    # -------------------------------------------------------------------- #
                    {% set raw_lines = ns.final_val.split('\n') %}
                    {% set ns_gcode = namespace(dent = 0, prev_empty = false, unclosed = false) %}
                    {% set html_lines = [] %}

                    {% for ln in raw_lines %}
                        {% set t = ln|trim %}

                        # 1 - close or else/elif → pop
                        {% if '{% end' in t or '{% el' in t %}
                            {% set ns_gcode.dent = [ns_gcode.dent - 1, 0]|max %}
                        {% endif %}

                        # 2 - render at current indent
                        {% set pad = '&nbsp;&nbsp;' * ns_gcode.dent %}

                        # 2b - dont spam newlines where klipper added newline for a removed comment.
                        {% if t == '' %}
                            {% if not ns_gcode.prev_empty %}
                                {% set _ = html_lines.append(nl) %}
                                {% set ns_gcode.prev_empty = true %}
                            {% endif %}
                        {% else %}
                            {% set _ = html_lines.append(pad ~ t ~ nl) %}
                            {% set ns_gcode.prev_empty = false %}
                        {% endif %}

                        # 2c - if it ends with a pure closer, inject blank line
                        {% if (t.endswith('{% endif %}') or t.endswith('{% endfor %}')) and (t != ('{% endif %}' or '{% endfor %}')) and not ns_gcode.prev_empty %}
                            {% set _ = html_lines.append(nl) %}
                        {% endif %}

                        # 3 - opener or else/elif → push
                        {% if '{% if' in t or '{% for' in t or '{% el' in t %}
                            {% set ns_gcode.dent = ns_gcode.dent + 1 %}
                        {% endif %}
                    {% endfor %}

                    # 4 - Re-join, wrap in your summary/details logic as before 
                    {% set plain_full = html_lines|join('') %}

                    # -------------------------------------------------------------------- #
                    #  DISPLAY WITH SUMMARY
                    #  – if the string is short  → keep the old one-liner
                    #  – if the string is long   → show preview + expandable details
                    # -------------------------------------------------------------------- #
                    {% if plain_full|length <= long_limit|int and '\n' not in plain_full %}
                        # ── SHORT STRING ─────────────────────────── #
                        {% set line = "<span title='" ~ hover ~ "'>" ~
                            "<span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~ "</span> {" ~
                            "<span style='color:" ~ color_key  ~ "'>" ~ ns.final_key  ~ "</span>: " ~
                            "<span style='color:" ~ color_val  ~ "'>" ~ plain_full|replace(nl, '') ~ "</span> " ~
                            "<span style='color:" ~ color_typ  ~ "'>" ~ ns.final_typ   ~ "</span>}" ~
                            "</span>" %}
                        {% set ns.lines = ns.lines + [ line ] %}

                    {% else %}
                        # ── LONG STRING → build preview around 1st highlight + details─── #

                        # find earliest highlighted <span> placeholder (§n§ already expanded) #
                        {% set first_idx = plain_full.find(color_match) %}
                        {% if first_idx == -1 %} {% set first_idx = 0 %} {% endif %}

                        {% set preview_start = [first_idx - 35, 0]|max %}
                        {% set preview_end = preview_start + 75|int %}
                        {% set preview = plain_full[preview_start:preview_end] %}

                        # --- add ... if not cut at start
                        {% if preview_start > 0 %} {% set preview = "…" ~ preview %} {% endif %}
                        # --- add ... if not cut at end
                        {% if preview_end < plain_full|length %} {% set preview = preview ~ "…" %} {% endif %}

                        # summary line (preview) #
                        {% set summary = "<summary><span style='color:" ~ color_path ~ "'>" ~ ns.final_path ~
                            "</span> {" ~
                            "<span style='color:" ~ color_key ~ "'>" ~ ns.final_key ~ "</span>: " ~
                            "<span style='color:" ~ color_val ~ "'>" ~ preview|replace(nl, '') ~ "</span> " ~
                            "<span style='color:" ~ color_typ ~ "'>" ~ ns.final_typ ~ "</span>}</summary>" %}

                        # full content shown after expanding #
                        {% set details = "<div style='margin-left:1em; white-space:pre; overflow-x:auto;'>" ~ plain_full ~ "</div>" %}
                        {% set html = "<span style='display:inline-block'><details title='" ~ hover ~ "'>" ~ summary ~ details ~ "</details></span>" %}

                        {% set ns.lines = ns.lines + [ html ] %}
                    {% endif %}
                {% endif %}
            # -------------------------------------------------------------------- #
            #  SEARCH FURTHER
            #  - if type contains contents, go further until max_depth is hit.
            #  - adds to the list the for loop accesses.
            # -------------------------------------------------------------------- #
            {% elif typ_str == "dict" and depth < max_depth|int %}
                {% for child_key in cur_obj %}
                    {% set next = cur_path ~ "." ~ child_key|string %}
                    {% set entry = [next, cur_obj[child_key], depth + 1] %}
                    {% set ns.stack = ns.stack + [ entry ] %}
                {% endfor %}
            {% elif typ_str in ["list", "tuple", "set"] and depth < max_depth|int %}
                {% set idx = 0 %}
                {% for val in cur_obj %}
                    {% set next = cur_path ~ "[" ~ idx|string ~ "]" %}
                    {% set entry = [next, val, depth + 1] %}
                    {% set ns.stack = ns.stack + [ entry ] %}
                    {% set idx = idx + 1 %}
                {% endfor %}
            {% endif %}
            {% if ns.done|default(false) and ns.doneAtLine == "None" %}
                {% set ns.doneAtLine=loop.index|string %}
                RESPOND MSG="{loop.index|string}"
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if ns.lines|length == 0 %}
        {% set safe = raw_s|replace("'", "&apos;") %}
        RESPOND MSG="No matches found for '{safe}'"
    {% else %}
        # split into config vs everything else 
        {% set cfg = [] %}
        {% set oth = [] %}
        {% set hlp = [] %}
        {% for line in ns.lines %}
            {% if "<details title='printer.configfile.settings" in line or "<span title='printer.configfile.settings" in line %}
                {% set _ = cfg.append(line) %}
            {% elif "<details title='printer.gcode.commands" in line or "<span title='printer.gcode.commands" in line %}
                {% set _ = hlp.append(line) %}
            {% else %}
                {% set _ = oth.append(line) %}
            {% endif %}
        {% endfor %}

        # build the summaries 
        {% if oth %} {% set summary_oth = "<details><summary>others   (" ~ oth|length|string ~ " matches)</summary>" ~ (oth|join(nl)) ~ "</details>" %} {% endif %}
        {% if cfg %} {% set summary_cfg = "<details><summary>config   (" ~ cfg|length|string ~ " matches)</summary>" ~ (cfg|join(nl)) ~ "</details>" %} {% endif %}
        {% if hlp %} {% set summary_cfg = "<details><summary>help/cmd (" ~ hlp|length|string ~ " matches)</summary>" ~ (hlp|join(nl)) ~ "</details>" %} {% endif %}
        # send them both 
        {% set msg = "Found " ~ ns.lines|length|string ~ " matches for " ~ raw_s|replace("'", "&apos;") ~ ":" ~ summary_oth|replace('\n', nl)|replace('\r','') ~ summary_cfg|replace('\n', nl)|replace('\r','') %}
        RESPOND MSG="{msg}"
    {% endif %}





[gcode_macro PRINT_PRINTER_PATH]
description: "prints the contents of printer.$PATH$, use FORCE=1 to print longer messages"
variable_cutoff: 80
variable_key_cutoff: 50

# Color scheme variables
variable_color_key: "primary--text text--lighten-5"
variable_color_value: "white"
variable_color_container: "warning--text text--darken-1"
variable_color_special: "success--text text--darken-1"
variable_color_text: "primary--text text--lighten-4"
variable_color_error: "error--text text--darken-1"
variable_color_hint: "secondary--text text--lighten-1"
variable_color_type: "accent--text text--lighten-4"
variable_color_index: "info--text text--lighten-3"
variable_color_bool: "success--text text--darken-2"
variable_color_bool_false: "error--text text--darken-2"
variable_color_none: "secondary--text text--darken-4"
variable_color_number: "info--text text--lighten-1"
variable_color_string: "primary--text text--lighten-1"
variable_color_object: "accent--text text--darken-4"
gcode:
    {% set force_print = params.FORCE|default(0)|int %}
    {% set path_str = params.PATH|default("") %}
    {% if path_str.startswith("printer.") %}
        {% set path_str = path_str[8:] %}
    {% endif %}
    {% set parts = path_str.split('.') %}
    {% set ns = namespace(current=printer, invalid=False) %}

    {% for part in parts %}
        {% if not ns.invalid %}
            {% set keys = ns.current|list %}
            {% if part in keys %}
                {% set ns.current = ns.current[part] %}
            {% else %}
                RESPOND MSG="<span class='{color_error}'>Invalid part '{part}' in path 'printer.{params.PATH}'</span>"
                {% set ns.invalid = True %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if not ns.invalid %}
        {% set type_str = ns.current.__class__.__name__ %}
        {% set val_str = ns.current|string %}

        {% if type_str not in ('dict', 'list', 'tuple', 'set') %}
            {% set value_color = color_value %}
            {% if type_str == 'Coord' %}
                {% set value_color = color_special %}
            {% elif type_str == 'bool' %}
                {% if val_str == "True" %}
                    {% set value_color = color_bool %}
                {% else %}
                    {% set value_color = color_bool_false %}
                {% endif %}
            {% elif type_str in ['float', 'int'] %}
                {% set value_color = color_number %}
            {% elif type_str == 'str' %}
                {% set value_color = color_string %}
            {% elif type_str == 'NoneType' %}
                {% set value_color = color_none %}
            {% else %}
                {% set value_color = color_object %}
            {% endif %}
            RESPOND MSG="<span class='{color_text}'>Value at printer.{path_str}:</span> <span class='{value_color}'>'{val_str}'</span> <span class='{color_type}'>({type_str})</span>"
        {% endif %}

        {% if type_str in ('dict', 'list', 'tuple', 'set') %}
            {% set all_keys = ns.current|list %}
            {% if all_keys|length > 0 %}
                RESPOND MSG="<span class='{color_text}'>Contents of:</span> <span class='{color_key}'>printer.{path_str}</span>"
                {% if force_print %}
                    {% set limited_keys = all_keys %}
                {% else %}
                    {% set limited_keys = all_keys[:key_cutoff] %}
                {% endif %}
                {% for k in limited_keys %}
                    {% set raw_val = ns.current[k] %}
                    {% set val_type = raw_val.__class__.__name__ %}
                    {% set val_str = raw_val|string %}

                    {% set val_ns = namespace(trimmed=val_str, truncated_chars=0) %}
                    {% if val_str|length > cutoff and not force_print %}
                        {% set val_ns.trimmed = val_str[:cutoff - 3] + "..." %}
                        {% set val_ns.truncated_chars = val_str|length - cutoff + 3 %}
                    {% endif %}

                    {% set prefix_color = color_key %}
                    {% set value_color = color_value %}
                    {% set type_color = color_type %}
                    {% set hint_color = color_hint %}

                    {% if val_type in ('dict', 'list', 'tuple', 'set') %}
                        {% set value_color = color_container %}
                    {% elif val_type == 'Coord' %}
                        {% set value_color = color_special %}
                    {% elif val_type == 'bool' %}
                        {% if val_str == "True" %}
                            {% set value_color = color_bool %}
                        {% else %}
                            {% set value_color = color_bool_false %}
                        {% endif %}
                    {% elif val_type in ['float', 'int'] %}
                        {% set value_color = color_number %}
                    {% elif val_type == 'str' %}
                        {% set value_color = color_string %}
                    {% elif val_type == 'NoneType' %}
                        {% set value_color = color_none %}
                    {% else %}
                        {% set value_color = color_object %}
                    {% endif %}

                    {% if val_ns.trimmed != val_str %}
                        RESPOND MSG="<span class='{prefix_color}'>{k}:</span> <span class='{value_color}'>'{val_ns.trimmed}'</span> <span class='{type_color}'>({val_type})</span> <span class='{hint_color}'>(cut {val_ns.truncated_chars} chars)</span>"
                    {% else %}
                        RESPOND MSG="<span class='{prefix_color}'>{k}:</span> <span class='{value_color}'>'{val_ns.trimmed}'</span> <span class='{type_color}'>({val_type})</span>"
                    {% endif %}

                    {% if val_type == 'Coord' and raw_val is defined %}
                        {% for axis in ['x','y','z','e'] %}
                            {% set val = raw_val[axis]|default("n/a") %}
                            {% set val_axis_type = val.__class__.__name__ %}
                            {% set val_color = color_value %}
                            {% if val_axis_type == 'bool' %}
                                {% if val|string == "True" %}
                                    {% set val_color = color_bool %}
                                {% else %}
                                    {% set val_color = color_bool_false %}
                                {% endif %}
                            {% elif val_axis_type in ['float', 'int'] %}
                                {% set val_color = color_number %}
                            {% elif val_axis_type == 'str' %}
                                {% set val_color = color_string %}
                            {% elif val_axis_type == 'NoneType' %}
                                {% set val_color = color_none %}
                            {% else %}
                                {% set val_color = color_object %}
                            {% endif %}
                            RESPOND MSG="<span class='{color_index}'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{k}.{axis}:</span> <span class='{val_color}'>{val}</span> <span class='{color_type}'>({val_axis_type})</span>"
                        {% endfor %}
                    {% endif %}
                {% endfor %}
                {% if not force_print and all_keys|length > key_cutoff %}
                    {% set remaining = all_keys|length - key_cutoff %}
                    RESPOND MSG="<span class='{color_text}'>... {remaining} keys. (Use FORCE=1 to print all.)</span>"
                {% endif %}
            {% else %}
                RESPOND MSG="<span class='{color_text}'>printer.{path_str} has no keys or contents.</span>"
            {% endif %}
        {% endif %}
    {% endif %}






[gcode_macro NINJAGO]
gcode:
  {% set raw_msg = params.EVAL|default('') %}
  {% set segments = raw_msg.split('{') %}
  {% set ns = namespace(out = segments[0]) %}

  {% macro resolve(path) -%}
      {%- set path = path[8:] if path.startswith('printer.') else path -%}
      {%- set ns = namespace(obj = printer) -%}
      {%- for part in path.split('.') if part -%}
        {%- set ns.obj = ns.obj[part] -%}
      {%- endfor -%}
      {ns.obj}
  {%- endmacro %}

  {% for tail in segments[1:] if raw_msg %}
      {% set pair = tail.split('}', 1) %}
      {% if pair|length == 2 %}
          {% if not pair[0]|trim.startswith('printer.') %}
              RESPOND TYPE=error MSG={'Bad placeholder: {' ~ pair[0]|trim ~ '}'}
          {% endif %}
          {% set ns.out = ns.out ~ resolve(pair[0]|trim) ~ pair[1] %}
      {% else %}
          {% set ns.out = ns.out ~ '{' ~ tail %}
      {% endif %}
  {% endfor %}
  RESPOND MSG="{ns.out}"
