# CONTENTS:
# - DOC_DUMP -> SEARCH DOCS FOR .FUNCTION() 
# - MEGA_DUMP -> N LEVEL BRUTE FORCE SEARCH (PRINTER OBJECT)
# - PRINT_PRINTER_PATH -> PRINTS PRINTER.FOO.BAR (CONTENTS)
# - NINJAGO -> evaluates jinja shit for testing

[gcode_macro DOC_DUMP]
# Do take note that these are only '.somethings()' and not '|somethings()'! those arent exposed :(
#
# valid filters (|somethings) are:
#   default, int, float, round, lower, upper, replace, join, length, count, list, last, map, select, reject
#   rejectattr, sort, dictsort, items, abs, max, min, sum, format, safe, e, escape, string, title, capitalize, trim
#   truncate, indent, batch, center, slice, unique, reverse, random, pprint, filesizeformat, wordcount, wordwrap, urlencode, urlize, xmlattr, d
#
#############################
variable_splitter_key: '§'
#############################
description: "Usage: DOC_DUMP S=foo§bar   (§ = AND, case-insensitive)"
variable_color_obj:   "rgb(0,150,255)" 
variable_color_meth:  "rgb(255,200,50)" 
variable_color_doc:   "rgb(180,180,180)" # fiddle if you want idc
variable_color_match: "rgb(255,0,100)"
gcode:
    {% set query   = params.S|default("")|string %}
    {% set terms   = query.lower().split(splitter_key) %}
    {% set include__ = params.DUNDER|default(False) %} # dunder = from down under = autstrialian (double under -> __ :P)

    {% set types = [
        ["string",   ""], ["list",  []],  ["dictionary",  {}], # actual objects. cant think of more 
        ["tuple", ()],    ["int", 0|int], ["float", 0.0] # (casting 0 to |int cause im paranoid)
    ] %}

    # ──────────────────────────────────────────────────────────────
    # Highlight helper – returns the (possibly) highlighted string
    {% macro highlight(text, term) %}
        {% set L = term|length %}
        {% set idx = text.lower().find(term) %}
        {% set return = text[:idx] ~ "<span style='color:" ~ color_match ~ "'>" ~ text[idx:idx+L] ~ "</span>" ~ text[idx+L:] if idx != -1 else text %}
        {return}
    {%- endmacro %}
    # ──────────────────────────────────────────────────────────────
    # similar but cursed cause docs use weird formatting i dunno
    {% macro format_doc(text) %}
        {% set parts = text.split('\n\n') %}
        {% set paragraphs = [] %}
        {% for p in parts %}
            {% set _ = paragraphs.append(p|replace('\n', ' ')|trim) %}
        {% endfor %}
        {paragraphs|join('<br>')}
    {%- endmacro %}

    # fill buckets[typename] -> list of HTML rows
    {% set buckets = namespace(total=0, data={}) %}
    {% for typ, obj in types %}{% set _ = buckets.data.update({typ: []}) %}{% endfor %}

    {% for typ, obj in types %}
        {% for meth in obj.__dir__() %} # meth
            {% if not (meth.startswith("__") and meth.endswith("__")) or include__ %}
                {% set fn = obj|attr(meth) %}
                {% if fn and fn.__doc__ %}
                    {% set search_docs = fn.__doc__ %}
                    {% set keep = namespace(ok=true) %} # the more namespaces the better because you never loose track, right?
                    {% for t in terms %}{% set keep.ok=false if t and t not in (typ ~ " " ~ meth ~ " " ~ search_docs).lower() else keep.ok %}{% endfor %}

                    {% if keep.ok %}
                        {% set buckets.total = buckets.total + 1 %}
                        # escape
                        {% set mask = namespace(meth_html = meth, doc_html = format_doc(search_docs|e)) %}
                        {% for t in terms %}
                            {% set mask.meth_html = highlight(mask.meth_html, t) %}
                            {% set mask.doc_html  = highlight(mask.doc_html,  t) %}
                        {% endfor %}
                        {% set row = "<div style='margin-left:1em'><span style='color:" ~ color_obj  ~ "'>" ~ typ
                                ~ "</span>.<span style='color:" ~ color_meth ~ "'>"  ~ mask.meth_html ~ "<br>"
                                ~ "<span style='color:" ~ color_doc  ~ "; white-space:pre-wrap; font-size:small;'>" ~ mask.doc_html
                                ~ "</span></div>" %}
                        {% set _ = buckets.data[typ].append(row) %}
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    {% if buckets.total == 0 %}
        RESPOND MSG="No doc matches found for '{query}'"
    {% else %}
        {% set sections = [] %}
        {% for pair in types %}
            {% set typ = pair[0] %}
            {% if buckets.data[typ] %}
                {% set block = "<details><summary>" ~ typ ~ " (" ~ buckets.data[typ]|length|string ~ ")</summary>" ~ buckets.data[typ]|join('') ~ "</details>" %}
                {% set _ = sections.append(block) %}
            {% endif %}
        {% endfor %}
        {% set msg = "Found " ~ buckets.total|string ~ " matches for '" ~ query ~ "':" ~ sections|join('')|replace('\n', '') %}
        RESPOND MSG="{msg}"
    {% endif %}



[gcode_macro SEARCH]
description: Usage: SEARCH S=<term> [E=<exclude>]
variable_color_path:       "rgb(128,128,128)"
variable_color_key:        "rgb(0,150,255)"
variable_color_val:        "rgb(255,200,50)"
variable_color_typ:        "rgb(180,180,180)"
variable_color_match:      "rgb(255,0,100)"
variable_color_category:   "rgb(50,205,50)"
variable_color_box_bg:     "rgb(20,20,20)"
variable_color_box_border: "rgb(40,40,40)"
variable_font_size:        "0.9em"
variable_max_depth:        5
variable_search_sep:       "°"
variable_long_limit:       100
gcode:
  ; ======================= STYLES & HELPER JINJA MACROS ==========================
  {%- set base_style = "style='font-size:" ~ font_size ~ "; margin-bottom:3px;'" -%}
  {%- set box_style = "style='font-size:" ~ font_size ~ "; background-color:" ~ color_box_bg ~ "; border:1px solid " ~ color_box_border ~ "; border-radius:4px; padding:5px; margin-top:2px;'" -%}
  {% set raw_search = params.S|default("") %}
  {% set sections = {'gcode_commands': [], 'user_macros': [], 'config_templates': [], 'config_settings': [], 'other': []} %}
  
  #---< highlight resutls
  {%- macro _highlight_text(text, terms, color) -%}
      {%- set ns = namespace(output=text|string) -%}
      {%- for term in terms if term and term in ns.output|lower -%}
          {%- set idx = (ns.output|lower).find(term) -%}
          {%- set term_len = term|length -%}
          {%- if idx != -1 -%}
              {%- set ns.output = ns.output[:idx] ~ "<span style='color:" ~ color ~ "'>" ~ ns.output[idx:idx + term_len] ~ "</span>" ~ ns.output[idx + term_len:] -%}
          {%- endif -%}
      {%- endfor -%}
      { ns.output }
  {%- endmacro -%}

  #---< categorization for section sorting/gcode formatting
  {%- macro _get_category(itm) -%}
    {%- set category = 'other' -%}
    {%- if itm.path.startswith(('gcode_macro', 'configfile.settings.gcode_macro')) -%}
      {%- set category = 'user_macros' -%}
    {%- elif itm.path.startswith('gcode.commands') -%}     
      {%- set category = 'gcode_commands' -%}
    {%- elif (type_str == 'str' and ('{%' in itm.obj or '{' in itm.obj)) or itm.path.endswith('.gcode') -%}   
      {% set category = 'config_templates' -%}
    {%- elif itm.path.startswith('configfile.settings') -%}
      {%- set category = 'config_settings' -%}
    {%- endif -%}
    {category}
  {%- endmacro -%}
  #-------------------------------------- RENDERS --------------------------------------
  #---< gcode render
  {%- macro _render_gcode(item) -%}
      {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
      {%- set ns_format = namespace(lines=[], indent=0) -%}
      {%- for line in item.obj.split('\n') %}{%- set stripped = line|trim -%}{%- if stripped -%}
          {%- if '{% end' in stripped or '{% el' in stripped %}{% set ns_format.indent = [ns_format.indent - 1, 0]|max %}{% endif -%}
          {%- set _ = ns_format.lines.append('  ' * ns_format.indent ~ line|e) -%}
          {%- if '{% if' in stripped or '{% for' in stripped or '{% el' in stripped %}{% set ns_format.indent = ns_format.indent + 1 %}{% endif -%}
      {%- endif -%}{% endfor -%}
      {%- set gcode = _highlight_text(ns_format.lines|join('<br>'), include_terms, color_match) -%}
      {%- set summary = "<summary>" ~ h_path ~ "</summary>" -%}
      {%- set details = "<div " ~ box_style ~ "><div style='white-space:pre; font-family:monospace; overflow-x:auto;'>" ~ gcode ~ "</div></div>" -%}
      { "<details " ~ base_style ~ ">" ~ summary ~ details ~ "</details>" }
  {%- endmacro -%}

  #---< description/misc render
  {%- macro _render_long_string(item) -%}
      {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
      {%- set safe_val = item.obj|string|e|replace('\r', '')|replace('\n', '<br>') -%}
      {%- set h_val = _highlight_text(safe_val, include_terms, color_match) -%}
      {%- set summary = "<summary>" ~ h_path ~ "</summary>" -%}
      {%- set details = "<div " ~ box_style ~ ">" ~ h_val ~ "</div>" -%}
      { "<details " ~ base_style ~ ">" ~ summary ~ details ~ "</details>" }
  {%- endmacro -%}

  #---< simple value (int, none, float etc...) render
  {%- macro _render_primitive(item) -%}
      {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
      {%- set safe_val_str = item.obj|string|e|replace('\r', '')|replace('\n', '<br>') -%}
      {%- set val = _highlight_text(safe_val_str, include_terms, color_match) -%}
      {%- set h_type = _highlight_text("(" ~ item.obj.__class__.__name__ ~ ")", include_terms, color_typ) -%}
      { "<div " ~ base_style ~ ">" ~ h_path ~ ": <span style='color:" ~ color_val ~ "'>" ~ val ~ "</span> <span style='color:"~color_typ~"'>" ~ h_type ~ "</span></div>" }
  {%- endmacro -%}
  
  #---< mappables (dict, list....) render
  {%- macro _render_mapping(item) -%}
      {%- set h_path = _highlight_text(item.path, include_terms, color_match) -%}
      {%- set children = [] -%}
      {%- if item.obj is mapping and item.obj.items is defined -%}
          {%- for key, value in item.obj.items() | sort(attribute=0) -%}
              {%- set safe_val = value|string|e|replace('\r','')|replace('\n','<br>') -%}
              {%- if value is mapping or (value is sequence and value is not string) -%}
                  {%- set child_type = "(" ~ value.__class__.__name__ ~ ")" -%}
                  {%- set _ = children.append("<div><span style='color:" ~ color_key ~ "'>" ~
                                              key ~ ":</span> <span style='color:" ~ color_typ ~ "'>" ~
                                              child_type ~ "</span></div>") -%}
              {%- else -%}
                  {%- set h_val = _highlight_text(safe_val, include_terms, color_match) -%}
                  {%- set _ = children.append("<div><span style='color:" ~ color_key ~ "'>" ~
                                              key ~ ":</span> <span style='color:" ~ color_val ~ "'>" ~
                                              h_val ~ "</span></div>") -%}
              {%- endif -%}
          {%- endfor -%}
      {%- else -%} #---< dunno if this is even needed render.
          {%- for key in item.obj.__dir__() | sort -%}
              {%- if not key.startswith('__') -%}
                  {%- set value = item.obj | attr(key) -%}
                  {%- if value is not callable and value is not none -%}
                      {%- set safe_val = value|string|e|replace('\r','')|replace('\n','<br>') -%}
                      {%- if value is mapping or (value is sequence and value is not string) -%}
                          {%- set child_type = "(" ~ value.__class__.__name__ ~ ")" -%}
                          {%- set _ = children.append("<div><span style='color:" ~ color_key ~ "'>" ~
                                                      key ~ ":</span> <span style='color:" ~ color_typ ~ "'>" ~
                                                      child_type ~ "</span></div>") -%}
                      {%- else -%}
                          {%- set h_val = _highlight_text(safe_val, include_terms, color_match) -%}
                          {%- set _ = children.append("<div><span style='color:" ~ color_key ~ "'>" ~
                                                      key ~ ":</span> <span style='color:" ~ color_val ~ "'>" ~
                                                      h_val ~ "</span></div>") -%}
                      {%- endif -%}
                  {%- endif -%}
              {%- endif -%}
          {%- endfor -%}
      {%- endif -%}
      {%- set summary = "<summary>" ~ h_path ~
                        " <span style='color:" ~ color_typ ~ "'>(" ~
                        item.obj.__class__.__name__ ~ ")</span></summary>" -%}
      {%- set details = "<div " ~ box_style ~ ">" ~ (children|join) ~ "</div>" -%}
      { "<details " ~ base_style ~ ">" ~ summary ~ details ~ "</details>" }
  {%- endmacro -%}
  
  #-------------------------- MAIN RENDER DISPATCHER ---------------------------
  {%- macro _render_result(item) -%}
      {%- set type_str = item.obj.__class__.__name__ -%}
      {%- if type_str == 'str' and ('{%' in item.obj or '{' in item.obj) -%}{ _render_gcode(item) }
      {%- elif item.obj is mapping -%}{ _render_mapping(item) }
      {%- elif type_str == 'str' and item.obj|length > long_limit|int -%}{ _render_long_string(item) }
      {%- else -%}{ _render_primitive(item) }{%- endif -%}
  {%- endmacro -%}

  #---------------------------- ACTUAL SERACH --------------------------  
  {% if not raw_search %}
      { action_respond_info("Usage: SEARCH_PRINTER S=<terms> [E=<exclude_terms>]") }
  {% else %}
      {% set include_terms = raw_search.lower().split(search_sep) %}
      {% set exclude_str = params.E|default("") %}
      {% set exclude_terms = (exclude_str|lower).split(search_sep) %}
      {% set depth_limit = params.MAX_DEPTH|default(max_depth)|int %}
      {% set ns = namespace(queue=[], results=[]) %}
      {% for k in printer %}{% set _ = ns.queue.append({'path': k, 'obj': printer[k], 'depth': 1}) %}{% endfor %}
      
      { action_respond_info("Starting search for '" ~ raw_search|e ~ "'...") }
      {% for i in range(40000) if ns.queue %}
          {% set item = ns.queue.pop(0) %}
          {% set val_str = item.obj|string if not (item.obj is mapping) else "" %}
          {% set combined = (item.path ~ " " ~ val_str)|lower %}
          {% set keep = namespace(v=True) %}
          
          {% for term in include_terms if term and term not in combined %}{% set keep.v = False %}{% endfor %}
          {% for term in exclude_terms if term and term in combined %}    {% set keep.v = False %}{% endfor %}
          {% if 'configfile.config' in item.path %}{% set keep.v = False %}{% endif %} #---< duplicate but all values are strings lol
          
          {% if keep.v %}
              {% set _ = ns.results.append({'path': item.path, 'html': _render_result(item), 'category': _get_category(item)}) %}
          #---< dont keep? keep searching into it.
          {% elif item.depth < depth_limit %}
              {% if item.obj is mapping %} #---< mapping
                {% for k in item.obj %}{% set _ = ns.queue.append({'path': item.path ~ "." ~ k, 'obj': item.obj[k], 'depth': item.depth + 1}) %}{% endfor %}
              {% elif item.obj is sequence and item.obj is not string %} #---< or list?
                {% for i in range(item.obj|length) %}{% set _ = ns.queue.append({'path': item.path ~ "[" ~ i ~ "]", 'obj': item.obj[i], 'depth': item.depth + 1}) %}{% endfor %}
              {% endif %}
          {% endif %}
      {% endfor %}

      #---------------------------- DISPLAY SEARCH --------------------------  
      {% if not ns.results %}
          RESPOND MSG="No matches found for '{raw_search|e}'"
      {% else %}
          {% for item in ns.results|sort(attribute='path') %}
            {% set _ = sections[item.category].append(item.html) %}
          {% endfor %}
          
          {% set category_map = [
              ('G-Code Commands / Help',  sections.gcode_commands), 
              ('User-Defined Macros',     sections.user_macros),
              ('Config G-Code Templates', sections.config_templates),
              ('Configuration Settings',  sections.config_settings), 
              ('Live State & Other',      sections.other)] %}
          
          {% set output = [] %}
          {% for name, items in category_map if items %}
              {% set summary = "<summary style='color:" ~ color_category ~ "; font-weight:bold;'>" ~ name ~ " (" ~ items|length ~ " matches)</summary>" %}
              {% set _ = output.append("<details>" ~ summary ~ (items|join) ~ "</details>") %}
          {% endfor %}
          RESPOND MSG="Found {ns.results|length} matches for '{raw_search|e}':{output|join}"
      {% endif %}
  {% endif %}


[gcode_macro PRINT_PRINTER_PATH]
description: "prints the contents of printer.$PATH$, use FORCE=1 to print longer messages"
variable_cutoff: 80
variable_key_cutoff: 50

# Color scheme variables
variable_color_key: "primary--text text--lighten-5"
variable_color_value: "white"
variable_color_container: "warning--text text--darken-1"
variable_color_special: "success--text text--darken-1"
variable_color_text: "primary--text text--lighten-4"
variable_color_error: "error--text text--darken-1"
variable_color_hint: "secondary--text text--lighten-1"
variable_color_type: "accent--text text--lighten-4"
variable_color_index: "info--text text--lighten-3"
variable_color_bool: "success--text text--darken-2"
variable_color_bool_false: "error--text text--darken-2"
variable_color_none: "secondary--text text--darken-4"
variable_color_number: "info--text text--lighten-1"
variable_color_string: "primary--text text--lighten-1"
variable_color_object: "accent--text text--darken-4"
gcode:
    {% set force_print = params.FORCE|default(0)|int %}
    {% set path_str = params.PATH|default("") %}
    {% if path_str.startswith("printer.") %}
        {% set path_str = path_str[8:] %}
    {% endif %}
    {% set parts = path_str.split('.') %}
    {% set ns = namespace(current=printer, invalid=False) %}

    {% for part in parts %}
        {% if not ns.invalid %}
            {% set keys = ns.current|list %}
            {% if part in keys %}
                {% set ns.current = ns.current[part] %}
            {% else %}
                RESPOND MSG="<span class='{color_error}'>Invalid part '{part}' in path 'printer.{params.PATH}'</span>"
                {% set ns.invalid = True %}
            {% endif %}
        {% endif %}
    {% endfor %}

    {% if not ns.invalid %}
        {% set type_str = ns.current.__class__.__name__ %}
        {% set val_str = ns.current|string %}

        {% if type_str not in ('dict', 'list', 'tuple', 'set') %}
            {% set value_color = color_value %}
            {% if type_str == 'Coord' %}
                {% set value_color = color_special %}
            {% elif type_str == 'bool' %}
                {% if val_str == "True" %}
                    {% set value_color = color_bool %}
                {% else %}
                    {% set value_color = color_bool_false %}
                {% endif %}
            {% elif type_str in ['float', 'int'] %}
                {% set value_color = color_number %}
            {% elif type_str == 'str' %}
                {% set value_color = color_string %}
            {% elif type_str == 'NoneType' %}
                {% set value_color = color_none %}
            {% else %}
                {% set value_color = color_object %}
            {% endif %}
            RESPOND MSG="<span class='{color_text}'>Value at printer.{path_str}:</span> <span class='{value_color}'>'{val_str}'</span> <span class='{color_type}'>({type_str})</span>"
        {% endif %}

        {% if type_str in ('dict', 'list', 'tuple', 'set') %}
            {% set all_keys = ns.current|list %}
            {% if all_keys|length > 0 %}
                RESPOND MSG="<span class='{color_text}'>Contents of:</span> <span class='{color_key}'>printer.{path_str}</span>"
                {% if force_print %}
                    {% set limited_keys = all_keys %}
                {% else %}
                    {% set limited_keys = all_keys[:key_cutoff] %}
                {% endif %}
                {% for k in limited_keys %}
                    {% set raw_val = ns.current[k] %}
                    {% set val_type = raw_val.__class__.__name__ %}
                    {% set val_str = raw_val|string %}

                    {% set val_ns = namespace(trimmed=val_str, truncated_chars=0) %}
                    {% if val_str|length > cutoff and not force_print %}
                        {% set val_ns.trimmed = val_str[:cutoff - 3] + "..." %}
                        {% set val_ns.truncated_chars = val_str|length - cutoff + 3 %}
                    {% endif %}

                    {% set prefix_color = color_key %}
                    {% set value_color = color_value %}
                    {% set type_color = color_type %}
                    {% set hint_color = color_hint %}

                    {% if val_type in ('dict', 'list', 'tuple', 'set') %}
                        {% set value_color = color_container %}
                    {% elif val_type == 'Coord' %}
                        {% set value_color = color_special %}
                    {% elif val_type == 'bool' %}
                        {% if val_str == "True" %}
                            {% set value_color = color_bool %}
                        {% else %}
                            {% set value_color = color_bool_false %}
                        {% endif %}
                    {% elif val_type in ['float', 'int'] %}
                        {% set value_color = color_number %}
                    {% elif val_type == 'str' %}
                        {% set value_color = color_string %}
                    {% elif val_type == 'NoneType' %}
                        {% set value_color = color_none %}
                    {% else %}
                        {% set value_color = color_object %}
                    {% endif %}

                    {% if val_ns.trimmed != val_str %}
                        RESPOND MSG="<span class='{prefix_color}'>{k}:</span> <span class='{value_color}'>'{val_ns.trimmed}'</span> <span class='{type_color}'>({val_type})</span> <span class='{hint_color}'>(cut {val_ns.truncated_chars} chars)</span>"
                    {% else %}
                        RESPOND MSG="<span class='{prefix_color}'>{k}:</span> <span class='{value_color}'>'{val_ns.trimmed}'</span> <span class='{type_color}'>({val_type})</span>"
                    {% endif %}

                    {% if val_type == 'Coord' and raw_val is defined %}
                        {% for axis in ['x','y','z','e'] %}
                            {% set val = raw_val[axis]|default("n/a") %}
                            {% set val_axis_type = val.__class__.__name__ %}
                            {% set val_color = color_value %}
                            {% if val_axis_type == 'bool' %}
                                {% if val|string == "True" %}
                                    {% set val_color = color_bool %}
                                {% else %}
                                    {% set val_color = color_bool_false %}
                                {% endif %}
                            {% elif val_axis_type in ['float', 'int'] %}
                                {% set val_color = color_number %}
                            {% elif val_axis_type == 'str' %}
                                {% set val_color = color_string %}
                            {% elif val_axis_type == 'NoneType' %}
                                {% set val_color = color_none %}
                            {% else %}
                                {% set val_color = color_object %}
                            {% endif %}
                            RESPOND MSG="<span class='{color_index}'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{k}.{axis}:</span> <span class='{val_color}'>{val}</span> <span class='{color_type}'>({val_axis_type})</span>"
                        {% endfor %}
                    {% endif %}
                {% endfor %}
                {% if not force_print and all_keys|length > key_cutoff %}
                    {% set remaining = all_keys|length - key_cutoff %}
                    RESPOND MSG="<span class='{color_text}'>... {remaining} keys. (Use FORCE=1 to print all.)</span>"
                {% endif %}
            {% else %}
                RESPOND MSG="<span class='{color_text}'>printer.{path_str} has no keys or contents.</span>"
            {% endif %}
        {% endif %}
    {% endif %}






[gcode_macro NINJAGO]
gcode:
  {% set raw_msg = params.EVAL|default('') %}
  {% set segments = raw_msg.split('{') %}
  {% set ns = namespace(out = segments[0]) %}

  {% macro resolve(path) -%}
      {%- set path = path[8:] if path.startswith('printer.') else path -%}
      {%- set ns = namespace(obj = printer) -%}
      {%- for part in path.split('.') if part -%}
        {%- set ns.obj = ns.obj[part] -%}
      {%- endfor -%}
      {ns.obj}
  {%- endmacro %}

  {% for tail in segments[1:] if raw_msg %}
      {% set pair = tail.split('}', 1) %}
      {% if pair|length == 2 %}
          {% if not pair[0]|trim.startswith('printer.') %}
              RESPOND TYPE=error MSG={'Bad placeholder: {' ~ pair[0]|trim ~ '}'}
          {% endif %}
          {% set ns.out = ns.out ~ resolve(pair[0]|trim) ~ pair[1] %}
      {% else %}
          {% set ns.out = ns.out ~ '{' ~ tail %}
      {% endif %}
  {% endfor %}
  RESPOND MSG="{ns.out}"
