[gcode_macro TC_SHAPER_CALIBRATE]
description: runs a shaper thingy [T=<0,1,2...>]
gcode:
  {% set P   = printer %}
  {% set tc  = P.toolchanger %}
  {% set tns = tc.tool_numbers %}
  {% set cur = tc.tool_number %}
  {% set req = params.T|default(cur)|string %}
  {% set queue = [] %} {% set tinfo = [] %}
  # ----------< Build tool queue (current tool first, no param = current) ----------
  {% if tc.status != 'ready' %}
    RESPOND TYPE=error MSG="Cannot run, toolchangers status '{tc.status}' is not ready."
  {% endif %}
  {% for raw in (tns if req == 'all' else req.split(',')|map('trim')) %}
    {% set tn = raw|int(-1) %}
    {% if tn in tns and tn not in queue %} {% set _ = queue.insert(0, tn) if tn == cur else queue.append(tn) %}
    {% elif raw|trim and tn not in tns %} RESPOND MSG="Tool '{raw}' invalid, skipping."
    {% endif %}
  {% endfor %}
  {% if queue|length == 0 %}
    RESPOND TYPE=error MSG="No valid tools to process."
  {% endif %}
  # ----------< Homing guard ----------
  {% if P.toolhead.homed_axes != 'xyz' %}
    {% if P.configfile.settings.toolchanger.on_axis_not_homed == 'home' %}
      RESPOND MSG="homing first"
      G28
    {% else %}
      RESPOND TYPE=error MSG="Please home all axes first."
    {% endif %}
  {% endif %}
  # ----------< Build list ----------
  {% for tn in queue %}
    {% set name   = tc.tool_names[tn]|string %}
    {% set accel  = (P[name].get('params_accel', 'adxl345 ' ~ name|replace('tool ', '')))|string %} # either params_accel or tool name (adxl345 T1)
    {% set _ = tinfo.append([tn, accel, name]) %}
  {% endfor %}

  {% for tn, accel, name in tinfo %}
    {% if accel in printer %} 
      RESPOND MSG="Running calibration for {name|replace('tool ', '')} (accel: {accel})"
      {% if cur != tn %} T{tn} {% endif %}
      SHAPER_CALIBRATE CHIPS="{accel}"
      _TC_SHAPER_CALIBRATE_SAVE_TO_SVF NAME="{name|replace('tool ', '')}"
      #_TC_SHAPER_CALIBRATE_SAVE_PARAMS
    {% else %} 
      RESPOND MSG="did not find a '[{accel}]' section. (remember to either define your name in 'params_accel' or name them the same as your tools!)"
    {% endif %}
  {% endfor %}


[gcode_macro _TC_SHAPER_CALIBRATE_SAVE_TO_SVF]
description: "Save pending input_shaper values into SVF and clear the pending block."
variable_default_type: "MZV"
variable_default_freq: 0
variable_default_damp: 0.02
gcode:
  {% set cf      = printer.configfile %}
  {% set pend    = cf.save_config_pending_items.get('input_shaper', {}) %}
  {% if pend == {} %}
    RESPOND TYPE=error MSG="No pending input_shaper data found."
  {% elif params.get('NAME','') == '' %}
    RESPOND TYPE=error MSG="Missing param NAME"
  {% else %}
    # --------< get entry
    {% set svf_key = 'shapers_' ~ params.NAME|lower %}
    {% set svf     = printer.save_variables.variables %}
    {% set merged  = svf.get(svf_key, {'x': {}, 'y': {}}) %}
    # ----------< merge/update
    {% set defaults = {'type': default_type, 'freq': default_freq, 'damp': default_damp} %}
    {% for ax in ['x', 'y'] %}
      {% set cur = merged.get(ax, {}) %}
      {% for field in ['type', 'freq', 'damp'] %}
        {% set pkey = 'shaper_' ~ field ~ '_' ~ ax %}
        {% set val  = pend.get(pkey, cur.get(field, defaults[field])) %}
        {% set _ = cur.update({field: (val|string|upper if field == 'type' else val|float)}) %}
      {% endfor %}
      {% set _ = merged.update({ax: cur}) %}
    {% endfor %}
    # --------< write back to SVF
    SAVE_VARIABLE VARIABLE={svf_key} VALUE="{merged}"

    RESPOND MSG="shaper values saved as '{svf_key}' in your svf"
  {% endif %}


[gcode_macro _TC_SHAPER_CALIBRATE_SAVE_PARAMS]
description: "Save pending input_shaper values into the active / selected tool's parameters and clear the pending block."
variable_default_type: "MZV"
variable_default_freq: 0
variable_default_damp: 0.02
gcode:
  {% set cf   = printer.configfile %}
  {% set pend = cf.save_config_pending_items.get('input_shaper', {}) %}
  {% set P   = printer %}
  {% set tool = P[P.toolchanger.tool_names[P.toolchanger.tool_number]] %}
  {% if pend == {} %}
    RESPOND TYPE=error MSG="No pending input_shaper data found."
  {% else %}
    # --------< helper
    {% macro set_and_save(param, value) -%}
      SET_TOOL_PARAMETER  {rawparams} PARAMETER={param} VALUE={value}
      SAVE_TOOL_PARAMETER {rawparams} PARAMETER={param}
    {%- endmacro %}

    # --------< grab all from staged save
    {% for ax in ['x', 'y'] %}
      {% set type_val = (pend.get('shaper_type_' ~ ax,  default_type))|string|upper %}
      {% set freq_val = (pend.get('shaper_freq_' ~ ax,  default_freq))|string %}
      {% set damp_val = (tool.get('params_input_shaper_damping_ratio_' ~ ax, default_damp))|string %} # get from tool or default... (not in pending...)
      # --------< use small helper to save.
      {set_and_save('params_input_shaper_type_' ~           ax, type_val)}
      {set_and_save('params_input_shaper_freq_' ~           ax, freq_val)}
      {set_and_save('params_input_shaper_damping_ratio_' ~  ax, damp_val)}
    {% endfor %}
    RESPOND MSG="input_shaper parameters for {tool.name|replace('tool ', '')} staged for SAVE_CONFIG."
  {% endif %}
