# Last edit | 01.06.2025

[gcode_macro _UNIFIED_RESPOND]
description: "[?s(0-6)] status 0 success, 4 full error [?t] title, [?p] pre (macro), [?t] title line, [?m] message, [?n] newline, [?c] code toggle"
variable_message_colors: ["rgb(252, 16, 163)", "rgb(255, 64, 129)", "rgb(255, 160, 0)", "rgb(255, 160, 0)", "rgb(244, 67, 54)", "rgb(158, 158, 158)", "rgb(71, 71, 71)"]
variable_macro_colors:  ["rgb(8, 131, 248)",  "rgb(255, 160, 0)",  "rgb(255, 145, 0)",  "rgb(244, 67, 54)",  "rgb(244, 67, 54)",  "rgb(33, 150, 243)", "rgb(128, 128, 128)"]
#─────────────────────────────────────────────────────────────────────────────────────
# Reds / Pinks             Oranges / Yellows         Greens / Lime
#rgb(244, 67, 54)         rgb(255, 152, 0)        rgb(76, 175, 80)
#rgb(233, 30, 99)         rgb(255, 193, 7)        rgb(139, 195, 74)
#rgb(255, 64, 129)        rgb(255, 235, 59)       rgb(0, 200, 83)
## Cyan / Teal              Blues / Indigos           Purples / Violets
#rgb(0, 188, 212)         rgb(3, 169, 244)        rgb(156, 39, 176)
#rgb(0, 150, 136)         rgb(33, 150, 243)       rgb(103, 58, 183)
#rgb(0, 172, 193)         rgb(63, 81, 181)        rgb(123, 31, 162)
## Browns / Neutrals        Greys / Silvers           Black / White / Contrast
#rgb(121, 85, 72)         rgb(158, 158, 158)      rgb(0, 0, 0)
#rgb(205, 220, 57)        rgb(224, 224, 224)      rgb(255, 255, 255)
#rgb(255, 87, 34)         rgb(96, 125, 139)       rgb(255, 64, 129)
#─────────────────────────────────────────────────────────────────────────────────────
# --- cyberpunk ish colors
# pink rgb(252, 16, 163)      cyan rgb(8, 131, 248)           white rgb(250, 238, 250) 
# dark blue rgb(1, 35, 70)    dark blue 2 rgb(29, 32, 73)     yellow rgb(251, 226, 1)
# ─────────── pre-defined blocks ───────────────────────────────────────────────────────
variable_c_start : "<code style='font-size:14px;color:rgb(251,226,1);background:rgb(29,32,73);font-family:monospace;font-weight:bold;line-height:1.5;padding:2px 6px;margin:0 4px;display:inline-block;border-radius:4px;'>"
variable_c_close : "</code>"
variable_b_start : "<b>"
variable_b_close : "</b>"
variable_cmd_start : "<a class='command' style='color:rgb(255,255,0);'>"
variable_cmd_close: "</a>"
# ───────────────────────────────────────────────────────────────────────────────────────
# working message would be ?t  ?p  ?t  ?s3  ?m  ?t (?c ?b ?b ?c... ?n) ?s1 ?t ?m....

# ?t  ?p | pre with tooltip
# ?t  ?s3  ?m  ?t (?c ?b ?b ?c... ?n) | message with status code 3, with tooltip with code block with bold block and ending with a newline.
# ?t | tooltip
# ?m | message
# ?sN | (N being number 0-6) status color
# ?n | newline

# --- the below only works inside messages or prefixes.

# ?b | bold text start 
# ?b | bold text end

# ?b | code text start 
# ?b | code text end
#─────────────────────────────────────────────────────────────────────────────────────
gcode:
   #------------------------------------------------------------------------
   # 1.  Setup
   #------------------------------------------------------------------------
  {% set self = printer['gcode_macro _UNIFIED_RESPOND'] %}
  {% set raw = params.MSG|default("")|string %}
  {% set nl  = "\u0026\u0023\u0031\u0030\u003b" %}
  {% set msg = raw.replace("?n", "$nl$") %}
  {% set parts = msg.split("?") %}

  {% set wrapper_tags = ['cmd','c','b'] %}
  {% set ns = namespace(
        wrappers        = {},
        global_color    = 0,
        prefix          = "",  
        prefix_t        = "",
        cur_t           = "",  
        cur_msg         = "",  
        cur_msg_c       = 0,
        next_msg_c      = None,
        lines           = [],
        s0_msg_html     = "",
        ddd             = false)
  %}

  # Build wrapper table ───────────────────────────────────────────────────
  {% for w in wrapper_tags %}
    {% set _ = ns.wrappers.update({w: {'open': self[w ~ '_start'], 'close': self[w ~ '_close'], 'state': false} }) %}
  {% endfor %}
  # Parse the message, piece by piece
  {% for part in parts %}
    {% if part %}
      {% set detect = namespace(tag="", body=part) %}
      {% for w in wrapper_tags %}
          {% set detect.tag = w if part.startswith(w) and w|length > detect.tag|length else detect.tag %}
      {% endfor %}

      {% if detect.tag != "" %}
        {% set detect.body = part[detect.tag|length:] %}
      {% else %}
        {% set detect.tag  = part[0] %}
        {% set detect.body = part[1:] %}
      {% endif %}

      {% set content = detect.body|replace('&','&amp;')|replace('<','&lt;')|replace('>','&gt;')|replace("'",'&apos;')|replace('"','&quot;') %}
      #─────────────────────────────────────────────────────────────────
      {% if detect.tag == 's' %}
        {% set color = content|int %}
        {% set ns.global_color = color if color > ns.global_color else ns.global_color %}
        {% set ns.next_msg_c = color %}
      #─────────────────────────────────────────────────────────────────
      {% elif detect.tag == 'p' %} # if ?p is hit, take the current title and use it for pre title.
        {% set ns.prefix   = content %}
        {% set ns.prefix_t = ns.cur_t %}
        {% set ns.cur_t    = "" %}
      #─────────────────────────────────────────────────────────────────
      {% elif detect.tag == 't' %} # another title tag starts a new message, to make newlines in titles use ?n
        {% if ns.cur_msg %}
          {% set _ = ns.lines.append((ns.cur_t, ns.cur_msg, ns.cur_msg_c)) %}
          {% set ns.cur_msg = "" %}
        {% endif %}
        {% set ns.cur_t     = content %}
      #─────────────────────────────────────────────────────────────────
      {% elif detect.tag == 'm' %} # Message seperation with newline
        {% set ns.cur_msg_c  = ns.next_msg_c if ns.next_msg_c is not none else ns.global_color %}
        {% set ns.next_msg_c = None %}
        {% set ns.cur_msg = ns.cur_msg ~ (nl if ns.cur_msg else "") ~ content %}
        
      #─────────────────────────────────────────────────────────────────
      {% elif detect.tag in ns.wrappers %}
        {% set wentry = ns.wrappers[detect.tag] %}
        {% set snippet = (wentry.close if wentry.state else wentry.open) %}
        {% set ns.cur_msg = ns.cur_msg ~ snippet ~ content %}
        {% set _ = ns.wrappers.update({detect.tag:{'open':wentry.open, 'close':wentry.close, 'state': not wentry.state}}) %}
      #─────────────────────────────────────────────────────────────────
      {% elif detect.tag == 'r' %}
        {% if ns.cur_msg %}
          {% set ns.cur_msg = ns.cur_msg ~ detect.body %}
        {% else %}
          {% set _ = ns.lines.append(('RAW', detect.body, -1)) %}
        {% endif %}
      #─────────────────────────────────────────────────────────────────
      {% elif part.startswith('ddd') %} # detect ddd tag (disable drop down) ddd tag must be last! everything after is discarded
        {% set ns.ddd = true %}
      #─────────────────────────────────────────────────────────────────
      {% else %} # just merge again if no tag detected
        {% if ns.cur_msg %}
          {% set ns.cur_msg = ns.cur_msg ~ '?' ~ part %}
        {% elif ns.cur_t %}
          {% set ns.cur_t   = ns.cur_t   ~ '?' ~ part %}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endfor %}

  {% for wentry in ns.wrappers.values() %}# Close left open wrappers
      {% set ns.cur_msg = ns.cur_msg ~ wentry.close if wentry.state else ns.cur_msg %}
  {% endfor %}


  {% if ns.cur_msg or ns.cur_t %} # Close last message
    {% set _ = ns.lines.append((ns.cur_t, ns.cur_msg, ns.cur_msg_c)) %}
  {% endif %}

  {% set c_prefix = macro_colors[ns.global_color] %} # Pre uses biggest status number color 
  {% set prefix_html = "<span style='color:" ~ c_prefix ~ ";font-weight:bold;' title='" ~ ns.prefix_t ~ "'>" ~ ns.prefix ~ "</span>" %}

  {% set lines_html = [] %}
  {% for t,txt,clr in ns.lines %}
    {% if t == 'RAW' %}
      {% set _ = lines_html.append(txt) %}
    {% else %} # Make messages using their respective colors
      {% set c_msg = message_colors[clr] %}
      {% set line  = "<span style='color:" ~ c_msg ~ ";' title='" ~ t ~ "'>" ~ txt ~ "</span>" %}
      {% if ns.s0_msg_html == "" and clr == 0 and not ns.ddd %} # if its our first s0 message encountered
        {% set ns.s0_msg_html = line %}
      {% else %}
        {% set _ = lines_html.append(line) %}
      {% endif %}
    {% endif %}
  {% endfor %}

  {% if ns.lines|length > 1 and not ns.ddd %} # display the result, if ddd display all without summary, if not, show first s0, with rest in summary.
    {% set final = ("<details><summary>" ~ prefix_html ~ ns.s0_msg_html ~ "</summary>" ~ (lines_html|join(nl))).replace("$nl$", nl) ~ "</details>" %}
  {% else %}
    {% set final = (prefix_html ~ ([ns.s0_msg_html] + lines_html)|join(nl)).replace("$nl$", nl) %}
  {% endif %}

  RESPOND MSG="{final}"
