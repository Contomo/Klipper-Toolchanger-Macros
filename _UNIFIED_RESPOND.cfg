# Last edit | 17.04.2025

[gcode_macro _UNIFIED_RESPOND]
description: "[?s(0-5)] status 0 success, 5 full error [?t] title, [?p] prefix (macro), [?t] title line, [?m] message, [?n] newline, [?c] code toggle"
variable_message_colors: ["rgb(252, 16, 163)", "rgb(255, 64, 129)", "rgb(255, 160, 0)", "rgb(255, 160, 0)", "rgb(244, 67, 54)", "rgb(158, 158, 158)", "rgb(71, 71, 71)"]
variable_macro_colors:  ["rgb(8, 131, 248)",  "rgb(255, 160, 0)",  "rgb(255, 145, 0)",  "rgb(244, 67, 54)",  "rgb(244, 67, 54)",  "rgb(33, 150, 243)", "rgb(128, 128, 128)"]
#─────────────────────────────────────────────────────────────────────────────────────
# Reds / Pinks             Oranges / Yellows         Greens / Lime
#rgb(244, 67, 54)         rgb(255, 152, 0)        rgb(76, 175, 80)
#rgb(233, 30, 99)         rgb(255, 193, 7)        rgb(139, 195, 74)
#rgb(255, 64, 129)        rgb(255, 235, 59)       rgb(0, 200, 83)
## Cyan / Teal              Blues / Indigos           Purples / Violets
#rgb(0, 188, 212)         rgb(3, 169, 244)        rgb(156, 39, 176)
#rgb(0, 150, 136)         rgb(33, 150, 243)       rgb(103, 58, 183)
#rgb(0, 172, 193)         rgb(63, 81, 181)        rgb(123, 31, 162)
## Browns / Neutrals        Greys / Silvers           Black / White / Contrast
#rgb(121, 85, 72)         rgb(158, 158, 158)      rgb(0, 0, 0)
#rgb(205, 220, 57)        rgb(224, 224, 224)      rgb(255, 255, 255)
#rgb(255, 87, 34)         rgb(96, 125, 139)       rgb(255, 64, 129)
#─────────────────────────────────────────────────────────────────────────────────────
# --- cyberpunk ish colors
# pink rgb(252, 16, 163)      cyan rgb(8, 131, 248)           white rgb(250, 238, 250) 
# dark blue rgb(1, 35, 70)    dark blue 2 rgb(29, 32, 73)     yellow rgb(251, 226, 1)
#─────────────────────────────────────────────────────────────────────────────────────
# code block
variable_c_close: "</code>"
variable_c_start: "<code style='font-size: 14px; color: rgb(251, 226, 1); background-color: rgb(29, 32, 73); font-family: monospace; font-weight: bold; line-height: 1.5; padding: 2px 6px; margin: 0 4px; display: inline-block; border-radius: 4px;'>"
# bold block
variable_b_close: "</b>"
variable_b_start: "<b>"
#─────────────────────────────────────────────────────────────────────────────────────
# working message would be ?t  ?p  ?t  ?s3  ?m  ?t (?c ?b ?b ?c... ?n) ?s1 ?t ?m....

# ?t  ?p | prefix with tooltip
# ?t  ?s3  ?m  ?t (?c ?b ?b ?c... ?n) | message with status code 3, with tooltip with code block with bold block and ending with a newline.
# ?t | tooltip
# ?m | message
# ?sN | (N being number 0-6) status color
# ?n | newline

# --- the below only works inside messages or prefixes.

# ?b | bold text start 
# ?b | bold text end

# ?b | code text start 
# ?b | code text end
#─────────────────────────────────────────────────────────────────────────────────────
gcode:
  {% set raw = params.MSG|default("")|string %}
  {% set nl = "\u0026\u0023\u0031\u0030\u003b" %}
  {% set msg = raw.replace("?n", "$nl$") %}
  {% set parts = msg.split("?") %}
  {% set ns = namespace(
         global_color=0, 
         prefix="",
         prefix_title="",
         lines=[], 
         current_title="",
         current_msg="",
         current_msg_color=0,
         in_code=false,
         in_bold=false,
         ddd=false,
         s0_msg_html=""
         ) %}
  
  {% for part in parts %}
    {% if part %}
      {% set tag = part[0] %}
      {% set content = part[1:]|replace('&', '&amp;')|replace('<', '&lt;')|replace('>', '&gt;')|replace("'", '&apos;')|replace('"', '&quot;') %}
      {% if tag == "s" %}
        # set message color, set prefix color as highest color index we found so far.
        {% if ns.global_color < content|int %}
          {% set ns.global_color = content|int %}
        {% endif %}
        {% if ns.current_msg == "" %}
          {% set ns.current_msg_color = content|int %}
        {% endif %}
      
      {% elif tag == "p" %}
        # if ?p is hit, take the current title and use it for prefix title.
        {% set ns.prefix = content %}
        {% set ns.prefix_title = ns.current_title %}
        {% set ns.current_title = "" %}
      
      {% elif tag == "t" %}
        # another title tag starts a new message, to make newlines in titles use ?n
        {% if ns.current_msg != "" %}
          {% set _ = ns.lines.append((ns.current_title, ns.current_msg, ns.current_msg_color)) %}
          {% set ns.current_msg = "" %}
        {% endif %}
        {% set ns.current_title = content %}
        {% set ns.current_msg_color = ns.global_color %}
      
      {% elif tag == "m" %}
        # Message seperation with newline
        {% if ns.current_msg != "" %}
          {% set ns.current_msg = ns.current_msg ~ nl ~ content %}
        {% else %}
          {% set ns.current_msg = content %}
        {% endif %}
       
      {% elif tag == "c" %} # handle code block
        {% set content = content[1:] if content.startswith(" ") else content %}
        {% set content = content[:-1] if content.endswith(" ") else content %}
        {% set ns.current_msg = ns.current_msg ~ (c_close if ns.in_code else c_start) ~ content %}
        {% set ns.in_code = not ns.in_code %}

      {% elif tag == "b" %} # handle bold block
        {% set content = content[1:] if content.startswith(" ") else content %}
        {% set content = content[:-1] if content.endswith(" ") else content %}
        {% set ns.current_msg = ns.current_msg ~ (b_close if ns.in_bold else b_start) ~ content %}
        {% set ns.in_bold = not ns.in_bold %}

      {% elif part[0] == "d" and part[1] == "d" and part[2] == "d" %} # detect ddd tag (disable drop down) ddd tag must be last! everything after is discarded
        {% set ns.ddd = true %}

      {% else %} # just merge again if no tag detected
        {% if ns.current_msg != "" %}
          {% set ns.current_msg = ns.current_msg ~ "?" ~ part %}
        {% elif ns.current_title != "" %}
          {% set ns.current_title = ns.current_title ~ "?" ~ part %}
        {% endif %}
      {% endif %}
    {% endif %}
  {% endfor %}
  
  # Close last code block
  {% if ns.in_code %}
    {% set ns.current_msg = ns.current_msg ~ c_close %}
    {% set ns.in_code = false %}
  {% endif %}
  # Close last bold block
  {% if ns.in_bold %}
    {% set ns.current_msg = ns.current_msg ~ b_close %}
    {% set ns.in_bold = false %}
  {% endif %}
  
  # Close last message
  {% if ns.current_msg != "" or ns.current_title != "" %}
    {% set _ = ns.lines.append((ns.current_title, ns.current_msg, ns.current_msg_color)) %}
  {% endif %}
  
  # Prefix uses biggest status number color 
  {% set c_prefix = macro_colors[ns.global_color] %}
  {% set prefix_html = "<span style='color: " ~ c_prefix ~ "; font-weight: bold;' title='" ~ ns.prefix_title ~ "'>" ~ ns.prefix ~ "</span>" %}
  
  # Make messages using their respective colors
  {% set lines_html = [] %}
  {% for pair in ns.lines %}
    {% set title = pair[0] %}
    {% set msg   = pair[1] %}
    {% set line_color_idx = pair[2] %}
    {% set c_msg = message_colors[line_color_idx] %}
    {% set line_html = "<span style='color: " ~ c_msg ~ ";' title='" ~ title ~ "'>" ~ msg ~ "</span>" %}
    # if its our first s0 message encountered, set it to later display it right after prefix
    {% if ns.s0_msg_html == "" and line_color_idx == 0 %}
      {% set ns.s0_msg_html = line_html %}
    {% else %}
      {% set _ = lines_html.append(line_html) %}
    {% endif %}
  {% endfor %}

  # display the result, if ddd display all without summary, if not, show first s0, with rest in summary.
  {% if ns.lines|length > 1 and ns.ddd == false %}
    {% set final = ("<details><summary>" ~ prefix_html ~ ns.s0_msg_html ~ "</summary>" ~ (lines_html|join(nl))).replace("$nl$", nl) ~ "</details>" %}
  {% else %}
    {% set inline_all = ([ns.s0_msg_html] + lines_html)|join(nl) %}
    {% set final = (prefix_html ~ inline_all).replace("$nl$", nl) %}
  {% endif %}

  RESPOND MSG="{final}"


#{% if params.SILENT is not defined and macro_html != msg %}
#  {% if 'gcode_macro _UNIFIED_RESPONDrzrtz' in printer %}
#    _UNIFIED_RESPOND MSG="{msg}"
#  {% else %}
#    RESPOND {% if ('?s0' or '?s1') in msg %} TYPE='echo' {% else %} TYPE='error' {% endif %} MSG="{((msg|replace('?n','<br>')|replace('?m','<br>')|replace('?p','CUT_HERE')|replace('?t','<br>')|replace('?s0','')|replace('?s1','')|replace('?s2','!?')|replace('?s3','!')|replace('?s4','!!')|replace('?s5','!!!')|replace('?b',' !')|replace('?c',' *')).split('CUT_HERE'))[-1]}"
#  {% endif %}
#{% endif %}
